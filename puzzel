<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fancy Puzzle Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(45deg, #3498db, #2ecc71);
            overflow: hidden;
        }

        #game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);
        }

        #puzzle-container {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            gap: 10px;
            margin-bottom: 20px;
        }

        .puzzle-piece {
            width: 100px;
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #3498db;
            color: #fff;
            font-size: 24px;
            cursor: pointer;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
        }

        .empty-piece {
            background-color: #ccc;
            cursor: default;
        }

        .puzzle-piece:hover {
            transform: scale(1.1);
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
        }

        .slide-in {
            transition: transform 0.3s ease-in-out;
        }

        #reset-button {
            padding: 10px 20px;
            background-color: #2ecc71;
            color: #fff;
            border: none;
            font-size: 18px;
            cursor: pointer;
            transition: background-color 0.3s ease-in-out;
            margin-bottom: 20px;
        }

        #reset-button:hover {
            background-color: #27ae60;
        }

        #timer {
            font-size: 20px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>

<div id="game-container">
    <div id="puzzle-container"></div>
    <button id="reset-button" onclick="resetGame()">Reset Puzzle</button>
    <div id="timer">Time: <span id="time">0:00</span></div>
</div>

<script>
    const gridSize = 4;
    let puzzleGrid = [];
    let timerInterval;
    let seconds = 0;

    function createPuzzle() {
        puzzleGrid = Array.from({ length: gridSize * gridSize }, (_, index) => index + 1);
        puzzleGrid[gridSize * gridSize - 1] = null;
        shufflePuzzle();
        renderPuzzle();
        startTimer();
    }

    function shufflePuzzle() {
        puzzleGrid.sort(() => Math.random() - 0.5);
    }

    function renderPuzzle() {
        const puzzleContainer = document.getElementById('puzzle-container');
        puzzleContainer.innerHTML = '';

        puzzleGrid.forEach((number, index) => {
            const piece = document.createElement('div');
            piece.className = `puzzle-piece ${number === null ? 'empty-piece' : ''}`;
            piece.textContent = number !== null ? number : '';
            piece.addEventListener('click', () => handlePieceClick(index));
            puzzleContainer.appendChild(piece);
        });
    }

    function handlePieceClick(index) {
        const emptyIndex = puzzleGrid.indexOf(null);
        if (isAdjacent(index, emptyIndex)) {
            animateMove(index, emptyIndex);
            setTimeout(() => {
                swapPieces(index, emptyIndex);
                checkWin();
            }, 300);
        }
    }

    function isAdjacent(index1, index2) {
        const row1 = Math.floor(index1 / gridSize);
        const col1 = index1 % gridSize;
        const row2 = Math.floor(index2 / gridSize);
        const col2 = index2 % gridSize;

        return (Math.abs(row1 - row2) === 1 && col1 === col2) || (Math.abs(col1 - col2) === 1 && row1 === row2);
    }

    function swapPieces(index1, index2) {
        [puzzleGrid[index1], puzzleGrid[index2]] = [puzzleGrid[index2], puzzleGrid[index1]];
        renderPuzzle();
    }

    function animateMove(index1, index2) {
        const pieces = document.querySelectorAll('.puzzle-piece');
        const piece1 = pieces[index1];
        const piece2 = pieces[index2];

        piece1.classList.add('slide-in');
        piece2.classList.add('slide-in');

        setTimeout(() => {
            piece1.classList.remove('slide-in');
            piece2.classList.remove('slide-in');
        }, 300);
    }

    function checkWin() {
        const isWin = puzzleGrid.every((number, index) => number === index + 1 || (number === null && index === gridSize * gridSize - 1));
        if (isWin) {
            clearInterval(timerInterval);
            setTimeout(() => {
                alert(`Congratulations! You solved the puzzle in ${getFormattedTime()}`);
                createPuzzle();
            }, 300);
        }
    }

    function resetGame() {
        clearInterval(timerInterval);
        seconds = 0;
        document.getElementById('time').innerText = '0:00';
        createPuzzle();
    }

    function startTimer() {
        timerInterval = setInterval(() => {
            seconds++;
            document.getElementById('time').innerText = getFormattedTime();
        }, 1000);
    }

    function getFormattedTime() {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
    }

    createPuzzle();
</script>

</body>
</html>
